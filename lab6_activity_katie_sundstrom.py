# -*- coding: utf-8 -*-
"""Lab6_Activity_Katie Sundstrom

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U68u8TNEe94qk2YZOSdItkovlSDVSHNX

# Lab Activity Week 6

**Homework** Anything you do not complete in lab is your homework. Please provide a link to your github repository as your homework submission.

### Step 1 - Review: Comparing Indoor vs Outdoor data
- Cut out any data that was part of your outdoor data set that was not taken outdoors or take a new outdoor data set that runs for an extra 30s to give you time to get outside and then cut out that 30s interval
  - Recall we learned methods for slicing dataframes in week 2
- Now produce histogram plots that compare indoors vs outdoors for each of your data types - don't forget labels
- Compare the mean and standard deviation values for each set of indoor data versus outdoor data, are they in agreement?
  - NOTE: The variance in your data is not the uncertainty on the mean (central limit theorem)
  - what is your mean uncertainty?
  - How many inside mean standard deviations (1 sigma uncertainty) are your inside and outside measurements separated by?
- If your distributions were not well described by a Gaussian, do you think you took enough data for the central limit theorem to apply?
"""

import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as stats


from google.colab import drive

drive.mount('/content/drive')

insideData = pd.read_csv('/content/drive/MyDrive/Actual_inside_data.csv')
outsideData = pd.read_csv('/content/drive/MyDrive/Outside_data.csv')

slicedInside = insideData.drop(labels = 0, axis = 0)
slicedOutside = outsideData.drop(labels = 0, axis = 0)

display(slicedInside)

plt.title("Inside Temperature Data")
plt.hist(slicedInside["Temperature"])
plt.ylabel('Frequency')
plt.xlabel('Temperature')
plt.show()

plt.title("Inside Humidity Data")
plt.hist(slicedInside["Relative Humidity"])
plt.ylabel('Frequency')
plt.xlabel('Humidity')
plt.show()

plt.title("Inside Pressure Data")
plt.hist(slicedInside["Pressure"])
plt.ylabel('Frequency')
plt.xlabel('Pressure')
plt.show()

plt.title("Outside Temperature Data")
plt.hist(slicedOutside["Temperature"])
plt.ylabel('Frequency')
plt.xlabel('Temperature')
plt.show()

plt.title("Outside Humidity Data")
plt.hist(slicedOutside["Relative Humidity"])
plt.ylabel('Frequency')
plt.xlabel('Humidity')
plt.show()

plt.title("Outside Pressure Data")
plt.hist(slicedOutside["Pressure"])
plt.ylabel('Frequency')
plt.xlabel('Pressure')
plt.show()

print('TEMPERATURE - MEAN')
print('Inside temperature mean:', np.average(slicedInside["Temperature"])) #the inside temp mean
print('Outside temperature mean:', np.average(slicedOutside["Temperature"])) #the outside temp mean

print('HUMIDITY - MEAN')
print('Inside humidity mean:', np.average(slicedInside["Relative Humidity"])) #the inside humidity mean
print('Outside humidity mean:', np.average(slicedOutside["Relative Humidity"])) #the outside humidity mean

print('PRESSURE - MEAN')
print('Inside pressure mean:', np.average(slicedInside["Pressure"])) #the inside pressure mean
print('Outside pressure mean:', np.average(slicedOutside["Pressure"])) #the outside pressure mean

print('TEMPERATURE - STANDARD DEV')
print('Inside temperature standard deviation:', np.std(slicedInside["Temperature"])) #the inside temp standard deviation
print('Outside temperature standard deviation:', np.std(slicedOutside["Temperature"])) #the outside temp standard deviation

print('HUMIDITY - STANDARD DEV')
print('Inside humidity standard deviation:', np.std(slicedInside["Relative Humidity"])) #the inside humidity standard deviation
print('Outside humidity standard deviation:', np.std(slicedOutside["Relative Humidity"])) #the outside humidity standard deviation

print('PRESSURE - STANDARD DEV')
print('Inside pressure standard deviation:', np.std(slicedInside["Pressure"])) #the inside pressure standard deviation
print('Outside pressure standard deviation:', np.std(slicedOutside["Pressure"])) #the outside pressure standard deviation

print('MEAN UNCERTAINTY & MEAN STANDARD DEVIATION DIFFERENCES')
print('Inside temperature mean uncertainty:', (np.std(slicedInside["Temperature"]) / math.sqrt(296)))
print('Inside humidity mean uncertainty:', (np.std(slicedInside["Relative Humidity"]) / math.sqrt(296)))
print('Inside pressure mean uncertainty:', (np.std(slicedInside["Pressure"]) / math.sqrt(296)))
print('Outside temperature mean uncertainty:', (np.std(slicedOutside["Temperature"]) / math.sqrt(296)))
print('Outside humidity mean uncertainty:', (np.std(slicedOutside["Relative Humidity"]) / math.sqrt(296)))
print('Outside pressure mean uncertainty:', (np.std(slicedOutside["Pressure"]) / math.sqrt(296)))

print('Mean standard deviation differences:', abs(((np.std(slicedInside["Temperature"]) / math.sqrt(296)) - (np.std(slicedOutside["Temperature"]) / math.sqrt(296)))), ' --> less than 1 sigma')
print('Mean standard deviation differences:', abs(((np.std(slicedInside["Relative Humidity"]) / math.sqrt(296)) - (np.std(slicedOutside["Relative Humidity"]) / math.sqrt(296)))), ' --> less than 1 sigma')
print('Mean standard deviation differences:', abs(((np.std(slicedInside["Pressure"]) / math.sqrt(296)) - (np.std(slicedOutside["Pressure"]) / math.sqrt(296)))), ' --> less than 1 sigma')

"""### Step 2: Comparing sensors
- Get inside/outside data from another group in your lab and compare your inside data with their inside data, including all of elements from Step 1. - Do the same statistical comparison of your outside data with the outside data from the other group.
- How do the sensors compare? What do you think this indicates about the accuracy and precision of your sensors?
"""

otherGroupInside = pd.read_csv('/content/drive/MyDrive/indoordata.csv')
otherGroupOutside = pd.read_csv('/content/drive/MyDrive/outdoordata.csv')

display(otherGroupInside)

slicedOtherGroupInside = otherGroupInside.drop(labels = 0, axis = 0)
slicedOtherGroupOutside = otherGroupOutside.drop(labels = 0, axis = 0)

print('COMPARING WITH OTHER GROUP')
plt.title("Inside Temperature Data")
plt.hist(slicedOtherGroupInside["Temperature"])
plt.ylabel('Frequency')
plt.xlabel('Temperature')
plt.show()

plt.title("Inside Humidity Data")
plt.hist(slicedOtherGroupInside["Humidity"])
plt.ylabel('Frequency')
plt.xlabel('Humidity')
plt.show()

plt.title("Inside Pressure Data")
plt.hist(slicedOtherGroupInside["Pressure"])
plt.ylabel('Frequency')
plt.xlabel('Pressure')
plt.show()

plt.title("Outside Temperature Data")
plt.hist(slicedOtherGroupOutside["Temperature"])
plt.ylabel('Frequency')
plt.xlabel('Temperature')
plt.show()

plt.title("Outside Humidity Data")
plt.hist(slicedOtherGroupOutside["Humidity"])
plt.ylabel('Frequency')
plt.xlabel('Humidity')
plt.show()

plt.title("Outside Pressure Data")
plt.hist(slicedOtherGroupOutside["Pressure"])
plt.ylabel('Frequency')
plt.xlabel('Pressure')
plt.show()

print('TEMPERATURE - MEAN')
print('Inside temperature mean:', np.average(slicedOtherGroupInside["Temperature"])) #the inside temp mean
print('Outside temperature mean:', np.average(slicedOtherGroupOutside["Temperature"])) #the outside temp mean

print('HUMIDITY - MEAN')
print('Inside humidity mean:', np.average(slicedOtherGroupInside["Humidity"])) #the inside humidity mean
print('Outside humidity mean:', np.average(slicedOtherGroupOutside["Humidity"])) #the outside humidity mean

print('PRESSURE - MEAN')
print('Inside pressure mean:', np.average(slicedOtherGroupInside["Pressure"])) #the inside pressure mean
print('Outside pressure mean:', np.average(slicedOtherGroupOutside["Pressure"])) #the outside pressure mean

print('TEMPERATURE - STANDARD DEV')
print('Inside temperature standard deviation:', np.std(slicedOtherGroupInside["Temperature"])) #the inside temp standard deviation
print('Outside temperature standard deviation:', np.std(slicedOtherGroupOutside["Temperature"])) #the outside temp standard deviation

print('HUMIDITY - STANDARD DEV')
print('Inside humidity standard deviation:', np.std(slicedOtherGroupInside["Humidity"])) #the inside humidity standard deviation
print('Outside humidity standard deviation:', np.std(slicedOtherGroupOutside["Humidity"])) #the outside humidity standard deviation

print('PRESSURE - STANDARD DEV')
print('Inside pressure standard deviation:', np.std(slicedOtherGroupInside["Pressure"])) #the inside pressure standard deviation
print('Outside pressure standard deviation:', np.std(slicedOtherGroupOutside["Pressure"])) #the outside pressure standard deviation

print('MEAN UNCERTAINTY & MEAN STANDARD DEVIATION DIFFERENCES')
print('Inside temperature mean uncertainty:', (np.std(slicedOtherGroupInside["Temperature"]) / math.sqrt(59)))
print('Inside humidity mean uncertainty:', (np.std(slicedOtherGroupInside["Humidity"]) / math.sqrt(59)))
print('Inside pressure mean uncertainty:', (np.std(slicedOtherGroupInside["Pressure"]) / math.sqrt(59)))
print('Outside temperature mean uncertainty:', (np.std(slicedOtherGroupOutside["Temperature"]) / math.sqrt(59)))
print('Outside humidity mean uncertainty:', (np.std(slicedOtherGroupOutside["Humidity"]) / math.sqrt(59)))
print('Outside pressure mean uncertainty:', (np.std(slicedOtherGroupOutside["Pressure"]) / math.sqrt(59)))

print('Mean standard deviation differences:', abs(((np.std(slicedOtherGroupInside["Temperature"]) / math.sqrt(59)) - (np.std(slicedOtherGroupOutside["Temperature"]) / math.sqrt(59)))), ' --> less than 1 sigma')
print('Mean standard deviation differences:', abs(((np.std(slicedOtherGroupInside["Humidity"]) / math.sqrt(59)) - (np.std(slicedOtherGroupOutside["Humidity"]) / math.sqrt(59)))), ' --> less than 1 sigma')
print('Mean standard deviation differences:', abs(((np.std(slicedOtherGroupInside["Pressure"]) / math.sqrt(59)) - (np.std(slicedOtherGroupOutside["Pressure"]) / math.sqrt(59)))), ' --> less than 1 sigma')

"""### Step 3: More locations
- Consider other areas you could take your sensors where you might find a larger change in the data: for example, is there somewhere near lab where the air quality might be significantly worse?
- Set up your system to be able to run in a way that would allow you to get to that location and take ~5 minutes of data.
  - This might require adding additional input arguments, like a delayed start time, or changing to running indefinitely but making sure that your data is being collected and saved even if your script does not run gracefully.
- Compare this new set of data with your other outdoor data, including the same set of graphs and statistical comparisons made for earlier steps.
"""

lab6OutsideData = pd.read_csv('/content/drive/MyDrive/Lab6_Outside_data.txt')


display(lab6OutsideData)


slicedLab6OutsideData = lab6OutsideData.drop(labels = 0, axis = 0)


print('NEW LOCATION - OUTSIDE NEAR CONSTRUCTION')
plt.title("Outside Temperature Data")
plt.hist(slicedLab6OutsideData["Temperature"])
plt.ylabel('Frequency')
plt.xlabel('Temperature')
plt.show()


plt.title("Outside Humidity Data")
plt.hist(slicedLab6OutsideData["Relative Humidity"])
plt.ylabel('Frequency')
plt.xlabel('Humidity')
plt.show()


plt.title("Outside Pressure Data")
plt.hist(slicedLab6OutsideData["Pressure"])
plt.ylabel('Frequency')
plt.xlabel('Pressure')
plt.show()


print('TEMPERATURE - MEAN')
print('Outside temperature mean:', np.average(slicedLab6OutsideData["Temperature"])) #the outside temp mean


print('HUMIDITY - MEAN')
print('Outside humidity mean:', np.average(slicedLab6OutsideData["Relative Humidity"])) #the outside humidity mean


print('PRESSURE - MEAN')
print('Outside pressure mean:', np.average(slicedLab6OutsideData["Pressure"])) #the outside pressure mean


print('TEMPERATURE - STANDARD DEV')
print('Outside temperature standard deviation:', np.std(slicedLab6OutsideData["Temperature"])) #the outside temp standard deviation


print('HUMIDITY - STANDARD DEV')
print('Outside humidity standard deviation:', np.std(slicedLab6OutsideData["Relative Humidity"])) #the outside humidity standard deviation


print('PRESSURE - STANDARD DEV')
print('Outside pressure standard deviation:', np.std(slicedLab6OutsideData["Pressure"])) #the outside pressure standard deviation


print('MEAN UNCERTAINTY')
print('Outside temperature mean uncertainty:', (np.std(slicedLab6OutsideData["Temperature"]) / math.sqrt(325)))
print('Outside humidity mean uncertainty:', (np.std(slicedLab6OutsideData["Relative Humidity"]) / math.sqrt(325)))
print('Outside pressure mean uncertainty:', (np.std(slicedLab6OutsideData["Pressure"]) / math.sqrt(325)))

"""### Step 4: Correlations in data
- Plot temperature vs humidity
  - NOTE: These were taken by the same sensor at the same time, so each measurement matches up in time, meaning plotting one versus the other works.
  - What is the hidden variable that is important when making plots like this?
- What does this plot show? Are temperature and humidity correlated? How would you quantify this?
  - HINT: there are linear correlation comparisons you can make mathematically such as the Pearson's correlation or similar (linear $R^2$), is the correlation you are seeing linear? Can you implement these in code?
- Plot temperature vs another property measured by that sensor, are they correlated? Is the correlation qualitatively similar to what you see from temperature vs humidity?
  - try this for all data types (temp. vs pressure, temp. vs voc, etc.)
  
- Plot temperature vs PM2.5 concentration and discuss as with the previous comparisons.
  - This will require coming up with a way to ensure that the times match between sensors, what about the way you are collecting data ensures that this is true?

"""

import scipy.stats as stats

plt.title("Inside: Temperature vs. Humidity")
print("Temperature is blue, humidity is orange")
plt.plot(slicedInside["Temperature"])
plt.plot(slicedInside["Relative Humidity"])
plt.ylabel('Frequency')
plt.xlabel('Temperature and Humidity')
plt.show()

plt.title("Outside: Temperature vs. Humidity")
print("Temperature is blue, humidity is orange")
plt.plot(slicedOutside["Temperature"])
plt.plot(slicedOutside["Relative Humidity"])
plt.ylabel('Frequency')
plt.xlabel('Temperature and Humidity')
plt.show()

print("These plots show that: When the temperature is cooler, there will be a higher humidity. When the temperature is warmer, there will be a lower humidity. Therefore, they are inversely related.")
print("Inside: Pearson's correlation:")
stats.pearsonr(slicedInside["Temperature"], slicedInside["Relative Humidity"])
print("Outside: Pearson's correlation:")
stats.pearsonr(slicedOutside["Temperature"], slicedOutside["Relative Humidity"])

print(" -------------------------------------------------------------------------- ")

plt.title("Inside: Temperature vs. Pressure")
print("Temperature is blue, pressure is orange")
plt.plot(slicedInside["Temperature"])
plt.plot(slicedInside["Pressure"])
plt.ylabel('Frequency')
plt.xlabel('Temperature and Pressure')
plt.show()

plt.title("Outside: Temperature vs. Pressure")
print("Temperature is blue, pressure is orange")
plt.plot(slicedOutside["Temperature"])
plt.plot(slicedOutside["Pressure"])
plt.ylabel('Frequency')
plt.xlabel('Temperature and Pressure')
plt.show()

print("These plots show that: When the temperature is cooler, there will be a lower pressure. When the temperature is warmer, there will be a higher pressure. Therefore, they are linearly related.")
print("Inside: Pearson's correlation:")
stats.pearsonr(slicedInside["Temperature"], slicedInside["Pressure"])
print("Outside: Pearson's correlation:")
stats.pearsonr(slicedOutside["Temperature"], slicedOutside["Pressure"])

print(" -------------------------------------------------------------------------- ")

plt.title("Inside: Temperature vs. PM25")
print("Temperature is blue, PM25 is orange")
plt.plot(slicedInside["Temperature"])
plt.plot(slicedInside["PM25"])
plt.ylabel('Frequency')
plt.xlabel('Temperature and PM25')
plt.show()

plt.title("Outside: Temperature vs. PM25")
print("Temperature is blue, PM25 is orange")
plt.plot(slicedOutside["Temperature"])
plt.plot(slicedOutside["PM25"])
plt.ylabel('Frequency')
plt.xlabel('Temperature and PM25')
plt.show()

print("These plots show that: When the temperature is cooler, there will be a higher PM25. When the temperature is warmer, there will be a lower PM25. Therefore, they are inversely related.")
print("The times match between sensors because the variables are taken from the same data set.")
print("Inside: Pearson's correlation:")
print("Inside: Pearson's correlation:")
stats.pearsonr(slicedInside["Temperature"], slicedInside["PM25"])
print("Outside: Pearson's correlation:")
stats.pearsonr(slicedOutside["Temperature"], slicedOutside["PM25"])